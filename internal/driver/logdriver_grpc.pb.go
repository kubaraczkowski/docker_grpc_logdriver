// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package driver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IDockerLogDriverClient is the client API for IDockerLogDriver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IDockerLogDriverClient interface {
	GetLogs(ctx context.Context, in *LogOptions, opts ...grpc.CallOption) (IDockerLogDriver_GetLogsClient, error)
	ListServices(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ServicesList, error)
}

type iDockerLogDriverClient struct {
	cc grpc.ClientConnInterface
}

func NewIDockerLogDriverClient(cc grpc.ClientConnInterface) IDockerLogDriverClient {
	return &iDockerLogDriverClient{cc}
}

func (c *iDockerLogDriverClient) GetLogs(ctx context.Context, in *LogOptions, opts ...grpc.CallOption) (IDockerLogDriver_GetLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &IDockerLogDriver_ServiceDesc.Streams[0], "/logdriver.IDockerLogDriver/GetLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &iDockerLogDriverGetLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IDockerLogDriver_GetLogsClient interface {
	Recv() (*LogMessage, error)
	grpc.ClientStream
}

type iDockerLogDriverGetLogsClient struct {
	grpc.ClientStream
}

func (x *iDockerLogDriverGetLogsClient) Recv() (*LogMessage, error) {
	m := new(LogMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *iDockerLogDriverClient) ListServices(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ServicesList, error) {
	out := new(ServicesList)
	err := c.cc.Invoke(ctx, "/logdriver.IDockerLogDriver/ListServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IDockerLogDriverServer is the server API for IDockerLogDriver service.
// All implementations must embed UnimplementedIDockerLogDriverServer
// for forward compatibility
type IDockerLogDriverServer interface {
	GetLogs(*LogOptions, IDockerLogDriver_GetLogsServer) error
	ListServices(context.Context, *emptypb.Empty) (*ServicesList, error)
	mustEmbedUnimplementedIDockerLogDriverServer()
}

// UnimplementedIDockerLogDriverServer must be embedded to have forward compatible implementations.
type UnimplementedIDockerLogDriverServer struct {
}

func (UnimplementedIDockerLogDriverServer) GetLogs(*LogOptions, IDockerLogDriver_GetLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetLogs not implemented")
}
func (UnimplementedIDockerLogDriverServer) ListServices(context.Context, *emptypb.Empty) (*ServicesList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServices not implemented")
}
func (UnimplementedIDockerLogDriverServer) mustEmbedUnimplementedIDockerLogDriverServer() {}

// UnsafeIDockerLogDriverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IDockerLogDriverServer will
// result in compilation errors.
type UnsafeIDockerLogDriverServer interface {
	mustEmbedUnimplementedIDockerLogDriverServer()
}

func RegisterIDockerLogDriverServer(s grpc.ServiceRegistrar, srv IDockerLogDriverServer) {
	s.RegisterService(&IDockerLogDriver_ServiceDesc, srv)
}

func _IDockerLogDriver_GetLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LogOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IDockerLogDriverServer).GetLogs(m, &iDockerLogDriverGetLogsServer{stream})
}

type IDockerLogDriver_GetLogsServer interface {
	Send(*LogMessage) error
	grpc.ServerStream
}

type iDockerLogDriverGetLogsServer struct {
	grpc.ServerStream
}

func (x *iDockerLogDriverGetLogsServer) Send(m *LogMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _IDockerLogDriver_ListServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDockerLogDriverServer).ListServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logdriver.IDockerLogDriver/ListServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDockerLogDriverServer).ListServices(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// IDockerLogDriver_ServiceDesc is the grpc.ServiceDesc for IDockerLogDriver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IDockerLogDriver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logdriver.IDockerLogDriver",
	HandlerType: (*IDockerLogDriverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListServices",
			Handler:    _IDockerLogDriver_ListServices_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetLogs",
			Handler:       _IDockerLogDriver_GetLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "logdriver.proto",
}
